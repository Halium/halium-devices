#!/bin/bash

removeUnneededFolders () {
    rm -rf [Cc][Mm]actions
    rm -rf [Ll]inage[Aa]ctions
    rm -rf [Dd]oze
    rm -rf [Kk]ey[Hh]andler
}

stripCommonFolder () {
    echo "I: Processing vendor common folder: /$1/$2/$3"
    VENDOR_COMMON_TREE=$REPO_ROOT/$1/$2/$3

    # We need to have $VENDOR, $DEVICE and $DEVICE_COMMON or
    # $PLATFORM_COMMON available for setup-makefiles.sh in the common
    # repository, therefore export them.
    export VENDOR
    export DEVICE
    DEVICE_COMMON_HOLDER=$DEVICE_COMMON
    export DEVICE_COMMON=${DEVICE_COMMON:=$3}
    PLATFORM_COMMON_HOLDER=$PLATFORM_COMMON
    export PLATFORM_COMMON=${PLATFORM_COMMON:=$DEVICE_COMMON}

    if [ -f $VENDOR_COMMON_TREE/setup-makefiles.sh ]; then
        (
            cd $VENDOR_COMMON_TREE
            for l in $(find . -name "*proprietary-*.txt"); do
                echo "I: Processing proprietary blob file: $1/$2/$3/$l"
                grep -r -v -E '(^.*\.{1}(jar|apk)[|]?.*)' $l >$l".tmp" && mv $l".tmp" $l
            done
            # Set executable bit, needed for some device trees
            chmod +x ./setup-makefiles.sh
            # Actually run the script
            ./setup-makefiles.sh
        )
    fi

    # Since we don't use SELinux we want to make sure we remove the
    # ",context=u....:s0" from the fstab file(s) in the $VENDOR_COMMON
    # folder so we can mount the partitions without issues
    cd $VENDOR_COMMON_TREE && for m in $(find . -name "fstab*"); do
        echo "I: Processing fstab file: $1/$2/$3/$m"
        sed -r 's/(,context=.*:s0)//' $m >$m".tmp" && mv $m".tmp" $m
    done

   # Since we don't have SettingsLib, remove components that rely on it (which we therefore also don't use)
   # such as CMActions/LineageActions, KeyHandler and Doze. Simply removing the folder will disable them.
   cd $VENDOR_COMMON_TREE
   echo "I: Removing components relying on SettingsLib from: $1/$2/$3"
   removeUnneededFolders

   # Since we can have multiple common repos we need to make sure to set
   # back the original values in case they exist. Otherwise unset the value.
   if [ -n "$DEVICE_COMMON_HOLDER" ]; then
       DEVICE_COMMON=$DEVICE_COMMON_HOLDER
   else
       unset DEVICE_COMMON
   fi
      if [ -n "$PLATFORM_COMMON_HOLDER" ]; then
       PLATFORM_COMMON=$PLATFORM_COMMON_HOLDER
   else
       unset PLATFORM_COMMON
   fi
}

DEVICE=${1:=${DEVICE}}
JOBS=${JOBS:=12}
ARGS=($@)
REPO_ARGS=(${ARGS[@]:1})
IS_LINUX=$(uname -s | grep -q "Linux" && echo 1 || echo 0)

if [ "$IS_LINUX" == "1" ]; then
    DEVICES_ROOT="$(dirname "$(readlink -f "${0}")")"
    REPO_ROOT="$(readlink -f ${DEVICES_ROOT}/../..)"
    DEVICE_REGEX="([a-zA-Z0-9]+?)_([a-zA-Z0-9_]+)\.xml"
else
    DEVICES_ROOT="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
    REPO_ROOT="${DEVICES_ROOT}/../.."
    DEVICE_REGEX="([[:alnum:]]+)_([[:alnum:]]+)\.xml"
fi

if [ -z $DEVICE ]; then
    echo "Please specify a device codename"
    exit 0
fi

for f in `ls $DEVICES_ROOT/manifests/*.xml`
do
    if [[ $f =~ $DEVICE_REGEX ]]; then
        VENDOR=${BASH_REMATCH[1]}
        if [[ ${BASH_REMATCH[0]} =~ $DEVICE ]]; then
            MANIFEST=$f
            break
        fi
    fi
done
if [[ -z "$MANIFEST"  || -z "$VENDOR" ]]; then
    echo "The given device is not supported. :("
else
    echo "*****************************************"
    echo "I: Configuring for vendor $VENDOR and device $DEVICE"
    echo "*****************************************"

    # Test if there is already a device configured and the folder exists
    if [ -f $REPO_ROOT/.repo/local_manifests/device.xml ]; then
        rm $REPO_ROOT/.repo/local_manifests/device.xml
    elif ! [ -d $REPO_ROOT/.repo/local_manifests/ ]; then
        mkdir $REPO_ROOT/.repo/local_manifests/
    fi

    # Link the device manifest to the local_manifests folder
    ln $MANIFEST $REPO_ROOT/.repo/local_manifests/device.xml

    # Synchronize new new sources
    repo sync -c -j$JOBS -q $REPO_ARGS || cat $REPO_ROOT/.repo/local_manifests/*.xml
    # Refresh the device & common repositories so apks and jars are not copied
    # For this to work, all apks and jars need to be removed from
    # device/$VENDOR/$DEVICE/*proprietary-files*.txt and
    # device/$VENDOR/$DEVICE_COMMON/*proprietary-files*.txt

    # A device can have multiple commons as it seems, so we store them in
    # DEVICE_COMMON_TEMP and loop through them later.
    DEVICE_COMMON_TEMP=$(ls -d $REPO_ROOT/device/$VENDOR/*common* 2>/dev/null | rev | cut -d "/" -f1 | rev)
    VENDOR_COMMON_TEMP=$(ls -d $REPO_ROOT/vendor/$VENDOR/*common* 2>/dev/null | rev | cut -d "/" -f1 | rev)

    # OnePlus uses the device/oppo/common instead of expected device/oneplus/common for some targets.
    # We use a small workaround in order to catch these as well.
    if [ $VENDOR="oneplus" ]; then
        DEVICE_COMMON_TEMP2=$(ls -d $REPO_ROOT/device/oppo/*common* 2>/dev/null | rev | cut -d "/" -f1 | rev)
        VENDOR_COMMON_TEMP2=$(ls -d $REPO_ROOT/vendor/oppo/*common* 2>/dev/null | rev | cut -d "/" -f1 | rev)
        VENDOR2="oppo"
    fi

    DEVICE_TREE=$REPO_ROOT/device/$VENDOR/$DEVICE

    # Hack: Google Pixel 2 was wrongly announced as muskie, and then changed to walleye codename
    # we need to check muskie repo here instead of walleye since LineageOS did a crazy hack too
    if [[ ( $VENDOR = "google" ) && ( $DEVICE = "walleye" ) ]]; then
        DEVICE_TREE=$REPO_ROOT/device/$VENDOR/muskie
    fi

    # Hack: Google Pixel has lazy device tree structure, 2 devices in one
    if [[ ( $VENDOR = "google" ) && ( $DEVICE = "sailfish" ) ]]; then
        DEVICE_TREE=$REPO_ROOT/device/$VENDOR/marlin
    fi

    VENDOR_TREE=$REPO_ROOT/vendor/$VENDOR

    echo "*******************************************"
    if [ -f $DEVICE_TREE/setup-makefiles.sh ]; then
        echo "I: Refreshing device vendor repository: device/$VENDOR/$(basename $DEVICE_TREE)"
        (
            cd $DEVICE_TREE
            for i in $(find . -name "*proprietary-*.txt"); do
                echo "I: Processing proprietary blob file: device/$VENDOR/$(basename $DEVICE_TREE)/$i"
                grep -r -v -E '(^.*\.{1}(jar|apk)[|]?.*)' $i >$i".tmp" && mv $i".tmp" $i
            done
            # Set executable bit, needed for some device trees
            chmod +x ./setup-makefiles.sh
            # Actually run the script
            ./setup-makefiles.sh
        )
    fi

    # Some device trees are lazy and contain more than one device. Check subdirectory with devicename, too
    # (e.g. Google Pixel)
    if [ -f $DEVICE_TREE/$DEVICE/setup-makefiles.sh ]; then
        echo "I: Refreshing device vendor repository: device/$VENDOR/$(basename $DEVICE_TREE)/$DEVICE"
        (
            cd $DEVICE_TREE/$DEVICE
            for i in $(find . -name "*proprietary-*.txt"); do
                echo "I: Processing proprietary blob file: device/$VENDOR/$(basename $DEVICE_TREE)/$DEVICE/$i"
                grep -r -v -E '(^.*\.{1}(jar|apk)[|]?.*)' $i >$i".tmp" && mv $i".tmp" $i
            done
            # Set executable bit, needed for some device trees
            chmod +x ./setup-makefiles.sh
            # Actually run the script
            ./setup-makefiles.sh
        )
    fi

    # Since we don't use SELinux we want to make sure we remove the
    # ",context=u....:s0" from the fstab file(s) in the $DEVICE folder so we can
    # mount the partitions without issues
    cd $DEVICE_TREE && for j in $(find . -name "fstab*"); do
        echo "I: Processing fstab file: device/$VENDOR/$(basename $DEVICE_TREE)/$j"
        sed -r 's/(,context=.*:s0)//' $j >$j".tmp" && mv $j".tmp" $j
    done

    # Since we don't have SettingsLib, remove components that rely on it (which we therefore also don't use)
    # such as CMActions/LineageActions, KeyHandler and Doze. Simply removing the folder will disable them.
    cd $DEVICE_TREE
    echo "I: Removing components relying on SettingsLib from: device/$VENDOR/$(basename $DEVICE_TREE)"
    removeUnneededFolders

    # Loop through values in $DEVICE_COMMON_TEMP
    if [ -n "$DEVICE_COMMON_TEMP" ]; then
        for k in $DEVICE_COMMON_TEMP; do
            stripCommonFolder "device" "$VENDOR" "$k"
        done
    fi

    # Loop through values in $DEVICE_COMMON_TEMP2
    if [ -n "$DEVICE_COMMON_TEMP2" ]; then
        for k in $DEVICE_COMMON_TEMP2; do
            stripCommonFolder "device" "$VENDOR2" "$k"
        done
    fi

    # Loop through values in $VENDOR_COMMON_TEMP
    if [ -n "$VENDOR_COMMON_TEMP" ]; then
        for k in $VENDOR_COMMON_TEMP; do
            stripCommonFolder "vendor" "$VENDOR" "$k"
        done
    fi

    # Loop through values in $VENDOR_COMMON_TEMP2
    if [ -n "$VENDOR_COMMON_TEMP2" ]; then
        for k in $VENDOR_COMMON_TEMP2; do
            stripCommonFolder "vendor" "$VENDOR2" "$k"
        done
    fi

    echo "*******************************************"
fi



