#!/bin/bash

DEVICE=${1:=${DEVICE}}
JOBS=${JOBS:=12}

DEVICES_ROOT="$(dirname "$(readlink -f "${0}")")"
REPO_ROOT="${DEVICES_ROOT}/../.."

if [ -z $DEVICE ]; then
	echo "Please specify a device codename"
	exit 0
fi

if ! [ -f $DEVICES_ROOT/manifests/*_$DEVICE.xml ]; then
	echo "The given device is not supported. :("
else
	echo "*****************************************"
	echo "Configuring for device $DEVICE"
	echo "*****************************************"

	# Test if there is already a device configured and the folder exists
	if [ -f $REPO_ROOT/.repo/local_manifests/device.xml ]; then
		rm $REPO_ROOT/.repo/local_manifests/device.xml
	elif ! [ -d $REPO_ROOT/.repo/local_manifests/ ]; then
		mkdir $REPO_ROOT/.repo/local_manifests/
	fi

	# Link the device manifest to the local_manifests folder
	ln $DEVICES_ROOT/manifests/*_$DEVICE.xml $REPO_ROOT/.repo/local_manifests/device.xml

	# Synchronize new new sources
	repo sync --network-only -c -j$JOBS -q
	repo sync --local-only -c -j$JOBS -q

	# Refresh the vendor repository so apks and jars are not copied
	# For this to work, all apks and jars need to be removed from device/$vendor/$codename/proprietary-files.txt

	DEVICE_TREE=$REPO_ROOT/device/*/$DEVICE

	if [ -f $DEVICE_TREE/setup-makefiles.sh ]; then
		echo "I: Refreshing vendor repository"
		(cd $DEVICE_TREE; ./setup-makefiles.sh)
	fi
fi
